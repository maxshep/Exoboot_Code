# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Message_pb2 as Message__pb2


class GuiOptimizerStub(object):
    """This service is between
    GUI: Running on the Surface Tablet {Client}
    and
    Optimizer: Running on the Nvidia Jetson nano {Server}
    DESCRIPTION:
    The GUI will send the user input {i.e int32 LIKE(1), DISLIKE(-1) or SKIP(0)} and will receive a
    NULL message indicating new control parameters are generated -> new torque values
    are given to the motor by the FourSplineController -> the CMAES has been updated
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UserInput = channel.unary_unary(
                '/GuiOptimizer/UserInput',
                request_serializer=Message__pb2.GuiInputRequest.SerializeToString,
                response_deserializer=Message__pb2.Null.FromString,
                )


class GuiOptimizerServicer(object):
    """This service is between
    GUI: Running on the Surface Tablet {Client}
    and
    Optimizer: Running on the Nvidia Jetson nano {Server}
    DESCRIPTION:
    The GUI will send the user input {i.e int32 LIKE(1), DISLIKE(-1) or SKIP(0)} and will receive a
    NULL message indicating new control parameters are generated -> new torque values
    are given to the motor by the FourSplineController -> the CMAES has been updated
    """

    def UserInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuiOptimizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UserInput': grpc.unary_unary_rpc_method_handler(
                    servicer.UserInput,
                    request_deserializer=Message__pb2.GuiInputRequest.FromString,
                    response_serializer=Message__pb2.Null.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GuiOptimizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GuiOptimizer(object):
    """This service is between
    GUI: Running on the Surface Tablet {Client}
    and
    Optimizer: Running on the Nvidia Jetson nano {Server}
    DESCRIPTION:
    The GUI will send the user input {i.e int32 LIKE(1), DISLIKE(-1) or SKIP(0)} and will receive a
    NULL message indicating new control parameters are generated -> new torque values
    are given to the motor by the FourSplineController -> the CMAES has been updated
    """

    @staticmethod
    def UserInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GuiOptimizer/UserInput',
            Message__pb2.GuiInputRequest.SerializeToString,
            Message__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GenerateControlParametersStub(object):
    """This service is between
    Optimizer: Running on the Nvidia Jetson nano {Client}
    and
    Controller: Running on the RPi {Server}
    DESCRIPTION:
    The optimizer will send the a new set of control parameters {i.e array with 4 elements}
    generated using the old control parameters to the controller and will receive
    NULL message
    {NOTE: The optimizer's generate command is triggered only after an input from the
    user via the GUI}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ControlParameterRequest = channel.unary_unary(
                '/GenerateControlParameters/ControlParameterRequest',
                request_serializer=Message__pb2.CPRequest.SerializeToString,
                response_deserializer=Message__pb2.Null.FromString,
                )


class GenerateControlParametersServicer(object):
    """This service is between
    Optimizer: Running on the Nvidia Jetson nano {Client}
    and
    Controller: Running on the RPi {Server}
    DESCRIPTION:
    The optimizer will send the a new set of control parameters {i.e array with 4 elements}
    generated using the old control parameters to the controller and will receive
    NULL message
    {NOTE: The optimizer's generate command is triggered only after an input from the
    user via the GUI}
    """

    def ControlParameterRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GenerateControlParametersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ControlParameterRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ControlParameterRequest,
                    request_deserializer=Message__pb2.CPRequest.FromString,
                    response_serializer=Message__pb2.Null.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GenerateControlParameters', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GenerateControlParameters(object):
    """This service is between
    Optimizer: Running on the Nvidia Jetson nano {Client}
    and
    Controller: Running on the RPi {Server}
    DESCRIPTION:
    The optimizer will send the a new set of control parameters {i.e array with 4 elements}
    generated using the old control parameters to the controller and will receive
    NULL message
    {NOTE: The optimizer's generate command is triggered only after an input from the
    user via the GUI}
    """

    @staticmethod
    def ControlParameterRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GenerateControlParameters/ControlParameterRequest',
            Message__pb2.CPRequest.SerializeToString,
            Message__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UpdateCmaesRequestStub(object):
    """This service is between
    Controller: Running on the RPi {Client}
    and
    Optimizer: Running on the Nvidia Jetson nano {Server}
    DESCRIPTION:
    The controller will send a request to the optimizer to update the CMAES and will
    receive NULL in return from the optimizer
    {NOTE: The update is triggered only after the FourSplineController is executed and
    the new control parameters are generated}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateRequest = channel.unary_unary(
                '/UpdateCmaesRequest/UpdateRequest',
                request_serializer=Message__pb2.URequest.SerializeToString,
                response_deserializer=Message__pb2.Null.FromString,
                )


class UpdateCmaesRequestServicer(object):
    """This service is between
    Controller: Running on the RPi {Client}
    and
    Optimizer: Running on the Nvidia Jetson nano {Server}
    DESCRIPTION:
    The controller will send a request to the optimizer to update the CMAES and will
    receive NULL in return from the optimizer
    {NOTE: The update is triggered only after the FourSplineController is executed and
    the new control parameters are generated}
    """

    def UpdateRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UpdateCmaesRequestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRequest,
                    request_deserializer=Message__pb2.URequest.FromString,
                    response_serializer=Message__pb2.Null.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UpdateCmaesRequest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UpdateCmaesRequest(object):
    """This service is between
    Controller: Running on the RPi {Client}
    and
    Optimizer: Running on the Nvidia Jetson nano {Server}
    DESCRIPTION:
    The controller will send a request to the optimizer to update the CMAES and will
    receive NULL in return from the optimizer
    {NOTE: The update is triggered only after the FourSplineController is executed and
    the new control parameters are generated}
    """

    @staticmethod
    def UpdateRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UpdateCmaesRequest/UpdateRequest',
            Message__pb2.URequest.SerializeToString,
            Message__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
